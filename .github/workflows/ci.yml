name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUN_VERSION: 1.2.11

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check
        run: bun run typecheck

      - name: Format check
        run: bun run format:check

      - name: Run unit tests
        run: bun run test:unit
        env:
          SLACK_TOKEN: xoxb-test-token-${{ github.run_id }}

      - name: Run integration tests
        run: bun run test:integration
        env:
          SLACK_TOKEN: xoxb-test-token-${{ github.run_id }}
          GITHUB_ACTION_PATH: ${{ github.workspace }}

      - name: Run security tests
        run: bun run test:security

      - name: Generate test coverage
        run: bun test --coverage
        env:
          SLACK_TOKEN: xoxb-test-token-${{ github.run_id }}
          GITHUB_ACTION_PATH: ${{ github.workspace }}

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build project
        run: bun run build

      - name: Test action locally
        uses: ./
        with:
          slack_token: xoxb-test-token-${{ github.run_id }}
          download_directory: ./test-downloads
        id: test-action

      - name: Verify action output
        run: |
          echo "MCP Config output:"
          echo "${{ steps.test-action.outputs.mcp_config }}"
          
          # Validate JSON output
          echo '${{ steps.test-action.outputs.mcp_config }}' | jq . > /dev/null
          
          # Check server executable
          test -f "${{ steps.test-action.outputs.server_executable }}"

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: claude-mcp-slack:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm \
            -e SLACK_TOKEN=xoxb-test-token-${{ github.run_id }} \
            -e DOWNLOAD_DIRECTORY=/app/downloads \
            claude-mcp-slack:latest \
            timeout 10s bun run src/slack-server.ts || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, docker, security]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for release
        run: bun run build

      - name: Create release archive
        run: |
          tar -czf claude-mcp-slack-${{ github.event.release.tag_name }}.tar.gz \
            action.yml \
            src/ \
            package.json \
            tsconfig.json \
            README.md \
            LICENSE

      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./claude-mcp-slack-${{ github.event.release.tag_name }}.tar.gz
          asset_name: claude-mcp-slack-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip